[alias]
    a = add
    aa = diff --cached
    aad = "!$HOME/.config/scripts/git-classic-colours.sh diff --cached $@"
    aal = diff --cached --name-only
    alias = "!f() { git config -l | grep alias | sed 's/^alias\\.//g' | grep -v ^alias | grep -E ^$1=; }; f"
    alias-branch = "!f() { git symbolic-ref refs/heads/$1 refs/heads/$2; }; f"
    ap = add --patch
    app = "!f() { git show $1 | git apply; }; f"
    apr = "!f() { git show $1 | git apply -R; }; f"

    # list branches sorted by last modified
    b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
    bc = "!f() { git branch --merged | egrep -v \"(^\\*|$(git master-branch)|staging)\" | xargs git branch -d; }; f"
    bd = branch --delete
    bls = ls-remote --heads
    bmv = branch --move
    br = for-each-ref --format='%(refname:short) -> %(upstream:short)' refs/heads
    bu = branch --set-upstream-to
    buu = "!f() { git branch --set-upstream-to=origin/$(git branch --show-current) $(git branch --show-current); }; f"

    c = commit --verbose
    ca = "!f() { export GIT_COMMITTER_DATE=\"$(git show -s --format=%ai HEAD)\"; git commit -a --no-verify --amend --no-edit --verbose --date \"$GIT_COMMITTER_DATE\"; }; f"
    caa = "!f() { export GIT_COMMITTER_DATE=\"$(git show -s --format=%ai HEAD)\"; git commit --no-verify --amend --no-edit --verbose --date \"$GIT_COMMITTER_DATE\"; }; f"
    cae = "!f() { export GIT_COMMITTER_DATE=\"$(git show -s --format=%ai HEAD)\"; git commit -a --no-verify --amend --verbose --date \"$GIT_COMMITTER_DATE\"; }; f"
    caf = "!f() { git ca; git puf $@; }; f"
    caaf = "!f() { git caa; git puf $@; }; f"
    cam = commit --all --message
    camn = commit --all --no-verify --message
    camp = "!f() { git commit --all --message \"$1\"; git push; }; f"
    campn = "!f() { git commit --all --no-verify --message \"$1\"; git push --no-verify; }; f"
    cep = "!f() { git commit --allow-empty --message \"${1-empty-commit}\"; git push; }; f"
    chp = cherry-pick
    cln = clean -df
    cm = commit --message
    cmp = "!f() { git commit --message \"$1\"; git push; }; f"
    co = checkout
    cob = "!f() { git checkout -b $(echo $1 | tr ' ' -); }; f"
    com = !git co $(git master-branch)
    coo = checkout --ours
    coop = checkout --ours --patch
    cop = "!f() { git checkout --patch ${1-HEAD}; }; f"
    copd = cop develop
    copm = !git cop $(git master-branch)
    cot = checkout --theirs

    d = diff
    dc = diff -U0
    dd = "!$HOME/.config/scripts/git-classic-colours.sh diff"
    dl = diff --name-only
    dashboard = "!f() { /usr/local/bin/grv -repoFilePath /stemn/stemn-backend \"$@\"; }; f"
    db = "!f() { git diff $(git merge-base $(git branch --show-current) ${1-$(git master-branch)}); }; f"
    dbl = "!f() { git diff --name-only $(git merge-base $(git branch --show-current) ${1-$(git master-branch)}); }; f"
    dbp = "!f() { git --no-pager diff --no-color $(git merge-base $(git branch --show-current) ${1:-$(git master-branch)}); }; f"
    ds = diff --stat

    f = fetch --all

    find = "!f() { git grep \"$1\" $(git root); }; f"
    subst = "!f() { git grep --name-only \"$1\" $(git root) | xargs sed -i \"s/$1/$2/g\"; }; f" # usage: subst [source] [dest]

    # setup a local repository to track the remote repository
    get = "!f() { \
      REPO_NAME=$(basename $1 | sed s/.git$//); \
      mkdir $REPO_NAME; \
      cd $REPO_NAME; \
      git init; \
      git remote add origin $1; \
      git remote set-branches origin '*'; \
      git fetch; \
      for remote in $(git branch -r | grep -v /HEAD); do git checkout --track $remote >/dev/null 2>&1; done; \
      MASTER_BRANCH=$(git show-branch origin/main >/dev/null 2>&1 && echo main || echo master); \
      git checkout $(git master-branch); \
      git merge $(git master-branch); \
    }; f"

    # provide help by listing aliases
    h = "!git config -l | grep alias | cut -c 7-"

    l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    lf = "!git ls-files ~"
    ll = "!$HOME/.config/scripts/git-fzf-log.sh"
    lll = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

    m = merge
    ma = merge --abort
    master-branch = !git show-branch origin/main >/dev/null 2>&1 && echo main || echo master

    p = pull
    patch = !git --no-pager diff --no-color
    po = pull --no-edit --strategy recursive --strategy-option ours
    pp = "!git pull --no-edit; git push"
    psu = "!f() { git branch --set-upstream-to origin/$(git branch --show-current); git pull; }; f"
    pt = pull --no-edit --strategy recursive --strategy-option theirs
    pu = "!f() { git push ${1:+origin $(git branch --show-current):$1}; }; f"
    puf = push --force
    pun = push --no-verify
    puu = "!f() { git push --set-upstream origin $(git branch --show-current)${1:+:$1}; }; f"
    puuf = "!f() { git push --set-upstream origin $(git branch --show-current)${1:+:$1} --force; }; f"

    r = remote get-url origin
    ra = "!f() { git remote add $1 git@github.com:$2.git; }; f" # usage: git ra remote-name username/repository | adds a remote pointing to a repository
    rb = rebase --interactive --committer-date-is-author-date
    rba = rebase --abort
    rbc = rebase --continue
    rbd = rb develop
    rbm = !git rb $(git master-branch)
    rbos = rb --strategy-option theirs
    rh = "!f() { git reset HEAD${1:+\\~$1}; }; f"
    root = rev-parse --show-toplevel
    rp = reset --patch
    rr = remote --verbose

    rbo = "!f() { \
      BRANCH_NAME=$(git branch --show-current); \
      REBASE_BRANCH_NAME=$(git branch --show-current)-$(date +'%I-%M-%S.%d-%m-%y'); \
      git checkout -b $REBASE_BRANCH_NAME; \
      git rebase --empty drop --interactive --strategy-option theirs $1; \
      if $(git diff --exit-code --quiet $BRANCH_NAME); then \
        git branch --move $BRANCH_NAME $REBASE_BRANCH_NAME-pre-rebase; \
        git branch --move $REBASE_BRANCH_NAME $BRANCH_NAME; \
        echo Rebase completed successfully.; \
      else \
        echo Branch contains new changes after 'git rebase --strategy-option theirs'; \
        git diff $REBASE_BRANCH_NAME; \
      fi; \
    }; f"

    s = status
    sa = stash apply
    search = "!f() { git rev-list --all | GIT_PAGER=less xargs git grep -E \"$@\"; }; f"
    search-branch = "!f() { git rev-list $1 | GIT_PAGER=less xargs git grep -E \"$2\"; }; f"
    sf = "!f() { git diff $(git hash-object -t tree /dev/null) ${1-$(git master-branch)}; }; f" # show all files on branch
    sh = "!f() { git show HEAD${1:+\\~$1}; }; f"
    shd = "!f() { $HOME/.config/scripts/git-classic-colours.sh show HEAD${1:+\\~$1}; }; f"
    shl = "!f() { git show --name-status HEAD${1:+\\~$1}; }; f"
    sl = stash list
    sp = stash pop
    ss = stash show --patch
    st = stash
    su = status --untracked-files=no

    # interactively split current branch into two branches
    # doesnt allow BASH-style if statements
    split = "!f() { \
      BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD); \
      UUID=$(cut -c-4 /proc/sys/kernel/random/uuid); \
      \
      git status; \
      echo ""; \
      echo \\<======================== G I T ---- S P L I T ========================\\>;\
      echo [Please select the changes to store to the $BRANCH_NAME branch]; \
      echo [NOTE: Leftover unstaged changes will be automatically pushed to the split branch]; \
      if $(echo $BRANCH_NAME | grep -qE '\\-split\\-'); \
        then SPLIT_NAME=${BRANCH_NAME}-${UUID}; \
        else SPLIT_NAME=${BRANCH_NAME}-split-${UUID}; \
      fi; \
      \
      git branch -c $BRANCH_NAME $SPLIT_NAME; \
      read -p 'press ENTER to interactively select changes\n' BLANK; \
      git add --interactive; \
      \
      read -p 'Enter the commit message for your selected changes: ' COMMIT_MSG; \
      git commit -m \"$COMMIT_MSG\"; \
      git push; \
      \
      read -p 'press ENTER to push leftover changes to the split branch\n' BLANK; \
      git stash push --no-keep-index --include-untracked; \
      \
      git checkout $SPLIT_NAME; \
      git branch --unset-upstream; \
      git stash pop; \
      \
      read -p 'Enter the commit message for the leftover changes: ' COMMIT_MSG; \
      git add -A; \
      git commit -am \"$COMMIT_MSG\"; \
      git push -u origin $SPLIT_NAME; \
    }; f"

[push]
    default = current
    autoSetupRemote = true

[interactive]
    singleKey = true

[color]
    ui = true

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = reverse bold red
    newNormal = green bold
    newHighlight = reverse bold green

[color "diff"]
    meta = yellow
    frag = magenta bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse
    func = cyan

# Classic git diff colours

# [color "diff-highlight"]
#     oldNormal = 203 bold
#     oldHighlight = 203 bold 52
#     newNormal = 114 bold
#     newHighlight = 114 bold 22

# [color "diff"]
#     meta = 227
#     frag = 92 bold
#     commit = yellow bold
#     old = 203 bold
#     new = 114 bold
#     whitespace = 203 reverse
#     func = 98 bold

[diff]
    interHunkContext = 0

[diff-so-fancy]
    stripLeadingSymbols = false

[init]
    defaultBranch = master

[pull]
    rebase = true

[rebase]
    autostash = true

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[user]
    email = jackson@stemn.com
    name = Jackson Delahunt
    username = sabrehagen

[core]
    safecrlf = false
    pager = diff-so-fancy | less --tabs=2 -RFX --pattern '^(Date|added|deleted|modified):'

[sequence]
    editor = rebase-editor
[advice]
    skippedCherryPicks = false
